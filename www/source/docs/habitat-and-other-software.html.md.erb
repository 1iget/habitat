---
title: Habitat Docs - Habitat and Other Software
description: Describes how Habitat does not replace, but rather works with other popular software technologies.
---
# <a name="installing-packages" id="installing-packages" data-magellan-target="installing-packages">Habitat and Other Software</a>
Habitat has been designed to be complemntary to - not a replacement of - a variety of popular software solutions. With this approach in mind, Habitat aims to ease adoption and future-proof your workflow.

### Table of Contents

  - [Habitat and Provisioning Tools](#habitat-and-provisioning)
  - [Habitat and Containers](#habitat-and-containers)
  - [Habitat and Container Orchestration](#habitat-and-orchestration)

## <a name="habitat-and-provisioning" id="habitat-and-provisioning" data-magellan-target="habitat-and-provisioning">Habitat and Provisioning Tools</a>
#### Examples: [Terraform](https://www.terraform.io/) and [CloudFormation](https://aws.amazon.com/cloudformation/)
Provisioning tools like Terraform or CloudFormation enable you to write a configuration file to manage infrastructure resources. The configuration file is used along with a CLI tool to create, read, update, and delete infrastructure resources in a declarative way. Habitat is not a provisioning tool and works well with the provisioning tool of your choice.

Provisioning tools allow you to automate the installation and configuration of the Habitat Supervisor, along with loading any applications and services you need to run. The [Terraform Habitat Provisioner](https://www.terraform.io/docs/provisioners/habitat.html) provides a Terraform native method of installing the Habitat Supervisor and managing Habitat services. The [Habitat Operator](https://www.habitat.sh/get-started/kubernetes/) provides a native method of auto-managing Habitat services on Kubernetes. For any other provisioners, you can write your own script and include it in your automated provisioning. Visit the [Using Habitat](https://www.habitat.sh/docs/using-habitat/) section of the docs to find more details about configuring the Habitat Supervisor and Habitat services.

## <a name="habitat-and-containers" id="habitat-and-containers" data-magellan-target="habitat-and-containers">Habitat and Containers</a>
#### Examples: [Docker](https://www.docker.com/) and [CoreOS](https://coreos.com/)

Containers enable you to build an immutable snapshot of your runtime environment, including your operating system, system libraries, application libraries, and application. The container is built with a CLI tool, and then pushed to a container-specific artifact repository, known as a container registry. Habitat is not a container format and exports your application to the container format of your choice.

Habitat builds more secure containers by exporting your application and any of its runtime dependencies directly into the container. When you build your application with Habitat, your application takes ownership of the entire toolchain of its runtime dependencies. As a result, you no longer have to rely on a large operating system and unnecessary system libraries. This enables you to include only the binaries your application uses inside your container, which can decrease your container size and decrease your threat model size. Finally, [Habitat's HTTP API](https://www.habitat.sh/docs/using-habitat/#monitor-services) allows all of your application's runtime dependencies to be audited at any time. If a brand new vulnerability hits, Habitat's HTTP API makes it easy to programmatically inspect and audit the entire toolchain of your runtime environment without needing to worry about how your containers got built in the first place.

If your situation requires it, Habitat makes it simple to switch from containerized to non-containerized workloads. This is because Habitat packages only have a requirement on the kernel version of your operating system. (Linux: kernel 2.6.32 or later, Windows: Windows Server 2008 R2 or later and Windows 7 or later). You can take the same .hart file you use to export to a docker container and run it on a virtual machine or bare metal. By only requiring the kernel, Habitat gives you the ability to switch container formats or to switch to non-containerized workloads without significant rework.

## <a name="habitat-and-orchestration" id="habitat-and-orchestration" data-magellan-target="habitat-and-orchestration">Habitat and Container Orchestration</a>
#### Examples: [Kubernetes](https://kubernetes.io/)

Kubernetes is a portable, extensible open-source platform for managing containerized workloads and services that has declarative configuration and automation. Applications are run within Docker containers, grouped into pods. Kubernetes provides the control plane and API layer to schedule those pods.

Habitat is not a scheduling tool, and does not schedule container resources such as replicas, deployments, firewalls, networking, geo-location (affinity), etc. Instead, Habitat's responsibility is the service running inside the container. The Habitat Supervisor provides topologies, application binding, ring encryption, and dynamic configuration and other features not present in Kubernetes.

Since Habitat and Kubernetes are both able to manage services, using the [Habitat Operator](https://www.habitat.sh/get-started/kubernetes/) with Kubernetes empowers users to use Habitat's runtime features by operating in a Kubernetes native way. Where Habitat and Kubernetes overlap, the Habitat Operator defers control to Kubernetes.
