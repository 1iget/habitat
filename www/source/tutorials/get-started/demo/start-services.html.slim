---
title: Habitat - Start Up Services
---

section
  h2 Start Up Services

  p If you peek into the PostgreSQL tab below, you'll notice that we've taken the liberty of starting a Habitat #{link_to 'Supervisor', '/docs/glossary#glossary-supervisor'} for you with <code>hab sup run</code> and instructed it to load the <code>core/postgresql</code> package, which is now running in the background as a Habitat-managed service.

  p Now let's try loading our Ruby application into the same Supervisor using <code>hab svc load</code>. In the Ruby-on-Rails tab, run that command, passing it the origin and name of our example package:

  = code(:shell) do
    |
      $  hab svc load example/myrubyapp

  blockquote
    p Tip: If you make a mistake while entering a command, hit the Up arrow on your keyboard to re-enter it in the terminal window. You can fix your mistake without having to type the whole command over again.

  .window-buttons
    ul
      li
        a.button.active data-target="window-node-1" Ruby-on-Rails
      li
        a.button data-target="window-node-2" PostgreSQL

  #window-node-1.window-node
    = partial "partials/terminal" do

  .shell-panel.window-node id="window-node-2" style="display:none;"
    pre
      | user@workstation-machine:~$ hab sup run
        user@workstation-machine:~$ hab svc load core/postgresql

        » Installing core/postgresql
        ☁ Determining latest version of core/postgresql in the 'stable' channel
        ☛ Verifying core/postgresql/9.6.8/20180423183113
        → Using core/acl/2.2.52/20170513213108
        → Using core/attr/2.4.47/20170513213059
        → Using core/bash/4.3.42/20170513213519
        → Using core/bzip2/1.0.6/20170513212938
        → Using core/cacerts/2017.09.20/20171014212239
        → Using core/coreutils/8.25/20170513213226
        ☛ Verifying core/db/5.3.28/20170513213734
        → Using core/gcc-libs/5.2.0/20170513212920
        ☛ Verifying core/gdal/2.2.1/20171025112525
        ☛ Verifying core/gdbm/1.11/20170513213716
        ☛ Verifying core/geos/3.6.2/20171025112556
        → Using core/glibc/2.22/20170513201042
        → Using core/gmp/6.1.0/20170513202112
        → Using core/less/481/20170513213936
        → Using core/libcap/2.24/20170513213120
        ☛ Verifying core/libossp-uuid/1.6.2/20170514001348
        ☛ Verifying core/libxml2/2.9.6/20171025112053
        → Using core/linux-headers/4.3/20170513200956
        → Using core/ncurses/6.0/20170513213009
        → Using core/openssl/1.0.2l/20171014213633
        → Using core/pcre/8.38/20170513213423
        ☛ Verifying core/perl/5.22.1/20170513213942
        ☛ Verifying core/proj/4.9.3/20171025112633
        → Using core/readline/6.3.8/20170513213506
        → Using core/zlib/1.2.8/20170513201911
        ✓ Installed core/db/5.3.28/20170513213734
        ✓ Installed core/gdal/2.2.1/20171025112525
        ✓ Installed core/gdbm/1.11/20170513213716
        ✓ Installed core/geos/3.6.2/20171025112556
        ✓ Installed core/libossp-uuid/1.6.2/20170514001348
        ✓ Installed core/libxml2/2.9.6/20171025112053
        ✓ Installed core/perl/5.22.1/20170513213942
        ✓ Installed core/proj/4.9.3/20171025112633
        ✓ Installed core/postgresql/9.6.8/20180423183113
        ★ Install of core/postgresql/9.6.8/20180423183113 complete with 9 new packages installed.
        The core/postgresql service was successfully loaded

  p Notice that when you do so, the Supervisor recognizes that the application (as specified in its plan) must <a href="/docs/developing-packages/#runtime-binding">bind to a database</a> before it can be started. We will address that problem in the next step.

= link_to 'Next: Join Services Together', '/tutorials/get-started/demo/join-services/', class: 'button cta'
