---
title: Habitat - Create Your Plan
---

section
 h1 Create Your Plan

 p At the center of Habitat packaging is the plan. This is a directory comprised of shell scripts and optional configuration files that define how you download, configure, make, install, and manage the lifecycle of the software in the package. When writing a plan, it's important to understand that you are defining both how the package is built and how the Habitat service will behave when the Supervisor starts and manages the child process in the package.

 p As demonstrated in #{link_to 'Build a Sample App', '/tutorials/sample-app/'}, the quickest way to get started building your application with Habitat is by using scaffolding. In this example, we're using the Ruby scaffolding.

 p Scaffolding helps you build and package applications which follow the common patterns and practices for that application type. The more your application follows convention, the more scaffolding helps you. For a Ruby-on-Rails application, the Ruby scaffolding parses your Gemfile and uses that information to build your application with the dependencies listed there. It will also detect what version of Rails you're running and set sensible default behaviors for your <code>init</code> and <code>run</code> hooks.

 p To use scaffolding, navigate to the root of your project repo and run the following:

 pre
  code.console $ hab plan init -s ruby

 p Using <code>hab plan init</code> will result in a new directory located at <code>/path/to/repo/habitat</code> on your workstation. A <code>plan.sh</code> file will be created and the <code>pkg_name</code> variable in it will be set to the name of the parent directory. Also, any environment variables that you have previouly set (such as <code>HAB_ORIGIN</code>) will be used to populate the respective <code>pkg_*</code> variables. Because we specified the ruby scaffolding as an argument, your plan.sh will also include a reference to it.

 p See #{link_to 'hab plan init', '/docs/habitat-cli#hab-plan-init'} for more information on how to use this subcommand.

 p The basic structure of a plan is shown below:

 pre
  code.console $ tee
       .
       ├── config
       ├── default.toml
       ├── hooks
       └── plan.sh

 blockquote
  p Note: The plan.sh file is the only required file to create a package. Configuration files, runtime hooks, and other source files are optional.

 h2 Versioning

 = partial "/partials/global/versioning_concepts"

 h3 Defining the Ruby version

 p You can use the <code>ruby</code> keyword in your app's Gemfile to specify a version of Ruby. For example:

 pre
  code
   |
    source "https://rubygems.org"

    ruby "2.4.1"

 p The value of this keyword will be used to determine the version of the Habitat <code>core/ruby</code> package. For example, the Gemfile above would result in <code>core/ruby/2.4.1</code> being injected into your Plan's <code>pkg_deps</code> array.

 p You can also set the <code>scaffolding_ruby_pkg</code> variable in your plan.sh to specify a version of Ruby. For example:

 pre
  code
   |
    scaffolding_ruby_pkg=core/ruby/2.4.1

 p The value of this variable will be used to determine the Habitat package to satisfy the role of your app's Ruby implementation.

 blockquote
  p <b>Note</b> Currently only MRI versions of Ruby are supported.

 p The rest of the steps in this guide will show you how to customize your plan, connect to common external services, and test your package. The customization steps are not required; however, they may be needed on more advanced Ruby web applications.

= link_to 'Next: Define Dependencies', '/tutorials/build-your-own/define-dependencies/', class: 'button cta'
