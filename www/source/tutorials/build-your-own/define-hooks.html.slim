---
title: Habitat - Define Hooks
---

section
 h1 Define Hooks

 p Similar to defining the setup and installation experience at buildtime, behavior for your application or service needs to be defined at runtime. 

 = partial "/partials/hook_definition"
 
 p The #{link_to 'reference documentation', '/docs/reference/hooks'} contains the complete list of hooks; however, the only required hook is the <code>run</code> hook, and if you are only calling a built binary, you can specify that through a <code>pkg_svc_run</code> setting. Anything more complicated than running a binary and pointing to a local configuration file in the <code>config</code> directory will require you to create a custom <code>run</code> hook.

 h2 Scaffolding-generated Hooks

 p Scaffoldings auto-detect your application type and gems you are declaring and use that information to build your plan and create <code>init</code> and <code>run</code> hooks.
 
 p The default <code>init</code> hook provided by the Scaffolding does the following:

 ul
  li Sets up the environment variables for your app to connect to a database.
  li If your app type is a supported Rails app (version 4.1, 4.2, or 5.x), it will prompt you to set the <code>SECRET_KEY_BASE</code> value before initialization can complete.
  li If your app references the <code>pg</code> gem in your Gemfile.lock, it will attempt to connect to a PostgreSQL database (either as a standalone database, or as another Habitat package).

 p Once your web application has finished initializing, the <code>run</code> hook is executed. The <code>run</code> hook generated by the Ruby scaffolding uses the default <code>run</code> hook generated by the Studio by using the <code>pkg_svc_run</code> setting. It executes the <code>web</code> process to bring up a web server for your application. For more information on the web process, see #{link_to 'Define Processes','/tutorials/build-your-own/define-processes/'}.

 p If the default logic used in these hooks will not work for your application, you can create your own init and run hooks and place them within your <code>habitat/hooks</code> directory. User-generated plan files (such as hooks) take precedence over scaffolding-generated files. 
 
 h2 Helper functions

 p The following are the most-used helper functions and variables when implementing hooks:

 ul
  li <b>pkgPathFor</b>: Used to provide the root path for a package within your application's dependency tree. This is useful if your hook requires a binary or file from a dependent package.
  pre
   code
    |
     {{pkgPathFor "core/nginx"}}/config/fastcgi.conf

  p This path points to the <code>fastcgi.conf</code> file that resides in the <config> directory of the Nginx package.

  
 p For more helper functions that can be used in runtime hooks, see #{link_to 'Advanced Helpers','/docs/create-packages-configure#advanced-helpers'}.

 h2 Using runtime settings  

 p Habitat allows you to reference configuration values set at runtime. These can be helpful in your hooks if you need to reference port numbers, IP addresses, or other values when performing business logic during the lifecycle of your running service.
 
 p You can use #{link_to 'runtime configuration settings','/docs/reference/runtime-settings'} in your hooks. These include #{link_to 'user-created configuration settings','/tutorials/build-your-own/add-config/'} defined by you in your config file, or built-in values defined by Habitat. 

= link_to 'Next: Define Environment Variables', '/tutorials/build-your-own/define-variables/', class: 'button cta'