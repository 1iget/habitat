- if "#{current_page.data.type}" == "tutorial"
  h2 Building the sample app with Builder
- else
  h2 <a name="build-builder">Building your app with Builder</a>

p Instead of building your package locally with each iteration of your project source or updates to your plan, you can rebuild your package using Builder. Everytime you commit new code to your application's GitHub repository, Builder will automatically rebuild your package, and if enabled, push an image of that build to Docker Hub.

blockquote
 p <b>Note</b> Automatic rebuilds are not currently supported on forked repos.

- if "#{current_page.data.type}" == "tutorial"
  p If you have already done the #{link_to 'demo','/demo'}, this section will use the same basic flow to setup Builder to build packages of the sample Rails application from your GitHub repo. 

- else
  p If you have already done the #{link_to 'demo','/demo'}, this section will use the same basic flow to setup Builder to build your application from your GitHub repo. 

h3 Upload your code

- if "#{current_page.data.type}" == "tutorial"
  p When setting up Builder with your repo, Builder will look for a <code>plan.sh</code> file, so you must submit your current changes to your forked repository before proceeding further. These changes should include the <code>habitat</code> directory that contains plan.sh.
- else 
  p When setting up Builder with your repo, Builder will look for a <code>plan.sh</code> file, so commit and push any changes to master that include this file.

ol
 li When you have merged your plan into the master branch, log into #{link_to 'Habitat Builder','https://bldr.habitat.sh/#/sign-in'}.
 li Click on the origin you defined in #{link_to 'Creating an origin','/tutorials/download/create-origin/'}. Make sure the origin you created in the UI is the same that you specified in <code>pkg_origin</code> in your plan.
 li Navigate to <b>My Origins</b>, and then click on the origin you want this package to be associated with.

h3 Connect to Docker Hub

- if "#{current_page.data.type}" == "tutorial"
  p Because you will be using Docker Compose later on in this tutorial to connect Docker containers together, you must connect Builder to a #{link_to 'Docker Hub repository','https://hub.docker.com/'}.
- else
  p If you want to automatically publish exported containers to Docker Hub after your package is built, you must connect Builder to a #{link_to 'Docker Hub repository','https://hub.docker.com/'}.

p To do so, click on the <b>Integrations</b> tab, then <b>Add Docker Hub account</b>.

p Enter your username and password and click <b>Save Account</b>.

h3 Add the Github repo to your origin

ol
 li In the <b>Packages</b> view for your origin, click <b>Connect a Plan</b>. 
 li If you have not already installed the Habitat Builder GitHub app as part of the demo workflow, a link is provided in the UI. 
 - if "#{current_page.data.type}" == "tutorial"
   p You must install the app on your forked version of the <code>habitat-example-plans</code> repo; however it is recommended that you install it on all repositories so that you can use it outside of the tutorial with your own applications.
 - else 
   p You must install the app on your project repo; however it is recommended that you install it on all repositories so that you can use it with all of your applications on GitHub.
  
 li Fill in the text box with your GitHub organization name/repository name.

 .screenshot
     img src="/images/screenshots/connect-plan-builder.png"

h3 Run a build

p From the <b>Build Jobs</b> tab, click <b>Build Latest Version</b>. 

.screenshot
    img src="/images/screenshots/build-job-view.png"

- if "#{current_page.data.type}" == "tutorial"
  p Once the build is complete and the Docker container has been pushed to your Docker Hub repository, you are ready to run your application.
- else
  h3 Use the build
  
  p Once the build is complete, you can either download and install the package itself on any supported platform with the following:

  pre
   code.console
    |
     $ hab install origin/package

  p Or, because Builder automatically pushed your container to Docker Hub, you can now run your package as a Docker container by pulling it from your repository and running it like any other Docker container.

  pre
   code.console
    |
     $ docker pull your_docker_org/your_docker_repo
     $ docker run -it -p 8000:8000 your-docker-org/your-docker-repo